help.start()
demo()
q()
JYTOPKYS3.meta <- read.delim2("~/GitHub/JYTOPKYS3-meta.txt", comment.char="#")
View(JYTOPKYS3.meta)
JYTOPKYS3.data <- read.delim("~/GitHub/JYTOPKYS3-data.txt")
View(JYTOPKYS3.data)
# Import data \t with headers, I went back to the datacamp exercise where we did it:
lrn14 <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", sep="\t", header=TRUE)
sum(lrn14)
View(lrn14)
str(lrn14)
dim(lrn14)
library(dplyr)
install.packages("dyplyr")
install.packages("dplyr")
deep_questions <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D06",  "D15", "D23", "D31")
surface_questions <- c("SU02","SU10","SU18","SU26", "SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
strategic_questions <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
View(JYTOPKYS3.meta)
gender_questions <- c("F", "M")
lern12$Age
learn14$Age
lrn14$Age
# select the columns related to deep learning and create column 'deep' by averaging
deep_columns <- select(lrn14, one_of(deep_questions))
lrn14$deep <- rowMeans(deep_columns)
install.packages(c("mgcv", "rmarkdown"))
# select the columns related to deep learning and create column 'deep' by averaging
deep_columns <- select(lrn14, one_of(deep_questions))
install.packages("Select")
deep_columns <- select(lrn14, one_of(deep_questions))
deep_columns <- Select::select(lrn14, one_of(deep_questions))
deep_columns <- select(lrn14, one_of(deep_questions))
library("dplyr", lib.loc="C:/Program Files/R/R-3.4.2/library")
deep_columns <- select(lrn14, one_of(deep_questions))
stra_columns <- select(lrn14, one_of(strategic_questions))
surf_columns <- select(lrn14, one_of(surface_questions))
lrn14$deep <- rowMeans(deep_columns)
lrn14$stra <- rowMeans(stra_columns)
lrn14$surf <- rowMeans(surf_columns)
#Now I have the columns combined I keep the ones asked for
keep_columns <- c("gender","Age","attitude", "deep", "stra", "surf", "Points")
# select the 'keep_columns' to create a new dataset so that I see it better and go from there:
learning2014 <- select(lrn14, one_of(keep_columns))
#Now I have the columns combined I keep the ones asked for
keep_columns <- c("gender","Age","Attitude", "deep", "stra", "surf", "Points")
# select the 'keep_columns' to create a new dataset so that I see it better and go from there:
learning2014 <- select(lrn14, one_of(keep_columns))
str(learning2014)
#To reduce the matrix I excludeobservations where the exam points variable is zero --> I select rows where points is greater than zero
learning2014 <- filter(learning2014,points > 0)
str(learning2014)
#To reduce the matrix I excludeobservations where the exam points variable is zero --> I select rows where points is greater than zero
learning2014 <- filter(learning2014,points > 0)
select(learning2014$points = 0)
select(learning2014$points, points = 0)
select(learning2014$points, points > 0)
#To reduce the matrix I excludeobservations where the exam points variable is zero --> I select rows where points is greater than zero
learning2014 <- filter(learning2014,points > 0)
#To reduce the matrix I excludeobservations where the exam points variable is zero --> I select rows where points is greater than zero
# learning2014 <- filter(learning2014,points > 0) gives error: Error in filter_impl(.data, quo) :
# Evaluation error: comparison (6) is possible only for atomic and list types.
# select(learning2014$points, points > 0) didnt work
learning2014 <- filter(learning2014, "points" > 0)
str(learning2014)
#str gave me still 183 observations
learning2014 <- filter(learning2014, "points" = 0)
#str gave me still 183 observations
learning2014 <- filter(learning2014, "points" == 0)
str(learning2014)
#To reduce the matrix I excludeobservations where the exam points variable is zero --> I select rows where points is greater than zero
# learning2014 <- filter(learning2014,points > 0) gives error: Error in filter_impl(.data, quo) :
# Evaluation error: comparison (6) is possible only for atomic and list types.
# select(learning2014$points, points > 0) didnt work, maybe copy paste error, again:
learning2014 <- filter(learning2014, "points" > 0)
str(learning2014)
#To reduce the matrix I excludeobservations where the exam points variable is zero --> I select rows where points is greater than zero
# learning2014 <- filter(learning2014,points > 0) gives error: Error in filter_impl(.data, quo) :
# Evaluation error: comparison (6) is possible only for atomic and list types.
# select(learning2014$points, points > 0) didnt work, maybe copy paste error, again:
learning2014 <- filter(learning2014, Points > 0)
str(learning2014)
View(learning2014)
# select the 'keep_columns' to create a new dataset so that I see it better and go from there:
learning2014 <- select(lrn14, one_of(keep_columns))
#To reduce the matrix I excludeobservations where the exam points variable is zero --> I select rows where points is greater than zero
# learning2014 <- filter(learning2014,points > 0) gives error: Error in filter_impl(.data, quo) :
# Evaluation error: comparison (6) is possible only for atomic and list types.
# select(learning2014$points, points > 0) didnt work, maybe copy paste error, again:
learning2014 <- filter(learning2014, Points > 0)
setwd("~/GitHub/IODS-project")
#Save the analysis dataset to the ‘data’ folder, using for example write.csv() or write.table() functions. You can name the data set for example as learning2014(.txt or .csv). See ?write.csv for help or search the web for pointers and examples. Demonstrate that you can also read the data again by using read.table() or read.csv().  (Use `str()` and `head()` to make sure that the structure of the data is correct).  (3 points)
write.table(learning2014)
learning2014.csv <- write.table(learning2014)
read(learning2014.csv)
read.csv(learning2014.csv)
learning2014.csv <- write.csv(learning2014)
read.csv(learning2014.csv)
write.csv(learning2014, learning2014.csv)
write.csv(learning2014, "learning2014.csv")
read.csv(learning2014.csv)
read.csv("learning2014.csv")
